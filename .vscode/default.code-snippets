{
	// Place your fullstack-app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create reducer": {
		"scope": "typescript",
		"prefix": "reducer",
		"body": [
			"import { createAction, createReducer } from '@reduxjs/toolkit'",
			"",
			"export interface $TM_FILENAME_BASE {",
			"",
			"}",
			"",
			"export const $action = createAction<string>('$TM_FILENAME_BASE/$action');",
			"",
			"const initialState = {",
			"",
			"} as $TM_FILENAME_BASE;",
			"",
			"export default createReducer(initialState, (builder) => {",
			"\tbuilder",
			"\t.addCase($action, (state, action) => {",
			"\t\tstate. = action.payload;",
			"\t})",
			"})",
		]
	},
	"Create redux action": {
		"scope": "typescript",
		"prefix": "action",
		"body": [
			"export const $action = createAction<number>('$TM_FILENAME_BASE/$action');",
		]
	},
	"Redux async action": {
		"scope": "typescript",
		"prefix": "asyncaction",
		"body": [
			"export const $action = createAsyncThunk('${TM_FILENAME_BASE}/$action', async ()=>{",
			"",
			"});"
		]
	},
	"Add case in reducer builder": {
		"scope": "typescript",
		"prefix": "addcase",
		"body": [
			".addCase($1, (state, action) => {",
			"state. = state.;",
			"})"
		]
	},
	"Redux state dispatch": {
		"scope": "typescriptreact",
		"prefix": "dispatch",
		"body": [
			"const dispatch = useDispatch();",
		]
	},
	"Ignore eslint": {
		"prefix": "ignore",
		"body": [
			"// eslint-disable-next-line"
		]
	},
	"Classname": {
		"prefix": "classname",
		"body": [
			"className={classes.$1}"
		]
	},
	"Storybook stories": {
		"prefix": "story",
		"body": [
			"import React from 'react';",
			"import { ComponentStory, ComponentMeta } from '@storybook/react';",
			"",
			"export default {",
			"title: 'Client/${1}',",
			"component: ${1},",
			"decorators: [story => <div>{story()}</div>]",
			"} as ComponentMeta<typeof ${1}>;",
			"",
			"const Template: ComponentStory<typeof ${1}> = (args) => <${1} {...args} />;",
			"",
			"export const Default = Template.bind({});",
			"Default.args = {",
			"",
			"};"
		]
	},
	"Storybook template": {
		"prefix": "template",
		"body": [
			"export const ${1} = Template.bind({});",
			"${1}.args = {",
			"",
			"};"
		]
	}
}